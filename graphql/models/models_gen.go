// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type AuthResp struct {
	Authenticated bool   `json:"authenticated"`
	Identifier    string `json:"identifier"`
}

type Mutation struct {
}

type NotificationInput struct {
	Type      NotificationType `json:"type"`
	Recipient string           `json:"recipient"`
	Subject   *string          `json:"subject,omitempty"`
	Body      string           `json:"body"`
}

type Query struct {
}

type SignInInput struct {
	Identifier string `json:"identifier"`
	Password   string `json:"password"`
}

type SignUpInput struct {
	Name       string `json:"name"`
	Identifier string `json:"identifier"`
	Password   string `json:"password"`
}

type TriggerNotificationResp struct {
	NotificationID string `json:"notificationId"`
	Status         string `json:"status"`
	Message        string `json:"message"`
	TriggerBy      string `json:"triggerBy"`
}

type ValidateTokenInput struct {
	Token string `json:"token"`
}

type ValidateTokenResp struct {
	UserID     string `json:"userId"`
	Identifier string `json:"identifier"`
}

type NotificationType string

const (
	NotificationTypeEmail NotificationType = "EMAIL"
	NotificationTypeSms   NotificationType = "SMS"
	NotificationTypePush  NotificationType = "PUSH"
)

var AllNotificationType = []NotificationType{
	NotificationTypeEmail,
	NotificationTypeSms,
	NotificationTypePush,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeEmail, NotificationTypeSms, NotificationTypePush:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
